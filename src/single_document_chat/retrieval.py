import os
import sys
import streamlit as st
from uuid import uuid4
from logger.custom_logger import CustomLogger
from exception.custom_exception import DocumentPortalException
from utils.model_loader import ModelLoader
from prompt.prompt_library import PROMPT_REGISTRY
from models.models import PromptType
from langchain_community.vectorstores import FAISS
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.chains import history_aware_retriever
from langchain.chains.retrieval import create_retrieval_chain
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory


class ConversationalRAG:
    def __init__(self, session_id:str, retriever):
        self.log = CustomLogger().get_logger(__name__)
        self.session_id = session_id
        self.retriever = retriever
        try:
            self.llm = self._load_llm()
            self.contextualize_prompt = PROMPT_REGISTRY[PromptType.CONTEXTUALIZE_QUESTION.value]
            self.qa_prompt = PROMPT_REGISTRY[PromptType.CONNTEXT_QA.value]

            self.history_aware_retriever_chain = history_aware_retriever(
                self.llm,
                self.retriever,
                self.contextualize_prompt
            )

            self.qa_chain = create_stuff_documents_chain(self.llm, prompt=self.qa_prompt)
            self.rag_chain = create_retrieval_chain(self.history_aware_retriever_chain, self.qa_chain)
            self.log.info("ConversationalRAG initialized successfully.", session_id=str(session_id), retriever=str(retriever))

            self.chain = RunnableWithMessageHistory(
                self.rag_chain,
                get_session_history=self._get_session_history,
                input_messages_key="input",
                history_messages_key="chat_history",
                output_messages_key="answer",
            )
            self.log.info("Wrapped chain with message history.", session_id=str(session_id))

        except Exception as e:
            self.log.error(f"Error initializing SingleDocumentChatIngestion", error=str(e))
            raise DocumentPortalException(e, sys)

    def _load_llm(self):
        try:
            llm = ModelLoader().load_llm()
            self.log.info("LLM loaded successfully.", model=str(llm))
            return llm
        except Exception as e:
            self.log.error(f"Error initializing SingleDocumentChatIngestion", error=str(e))
            raise DocumentPortalException(e, sys)
    
    def _get_session_history(self, session_id:str) -> BaseChatMessageHistory:
        try:
            if "store" not in st.session_state:
                st.session_state.store = {}
            
            if session_id not in st.session_state.store:
                st.session_state.store[session_id] = ChatMessageHistory()
                self.log.info("New chat session created.", session_id=str(session_id))
            return st.session_state.store[session_id]

        except Exception as e:
            self.log.error(f"Error getting session history", error=str(e))
            raise DocumentPortalException(e, sys)
        
    def load_retriver_from_fiass(self, faiss_dir:str):
        try:
            if not os.path.isdir(faiss_dir):
                raise FileNotFoundError(f"FAISS directory not found: {faiss_dir}")

            embedding = ModelLoader().load_embbeddings()
            vectorestore = FAISS.load_local(faiss_dir, embedding)    
            retriver = vectorestore.as_retriever(search_type="similarity", search_kwargs={"k":3})
            self.log.info("Retriever loaded successfully from FAISS.", faiss_dir=str(faiss_dir))
            return retriver
        
        except Exception as e:
            self.log.error(f"Error getting retriever from FIASS", error=str(e))
            raise DocumentPortalException(e, sys)

    def invoke(self, user_question:str):
        try:
            response = self.chain.invoke(
                {"input": user_question},
                config={"configurable": {"session_id": self.session_id}},
            )
            answer = response.get("answer", "No answer")

            if answer == "No answer":
                self.log.warning("No answer generated by the chain.", session_id=str(self.session_id), user_question=str(user_question))
            
            self.log.info("Chain invoked successfully.", session_id=str(self.session_id), user_question=str(user_question), answer=str(answer))
            return answer


        except Exception as e:
            self.log.error(f"Error invoking SingleDocumentChatIngestion", error=str(e))
            raise DocumentPortalException(e, sys)